// controllers/authController.js

import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import pool from '../db.js';

// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
export const register = async (req, res) => {
  const { email, password, role = 'participant' } = req.body;
  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const query = 'INSERT INTO users (email, password, role) VALUES ($1, $2, $3) RETURNING id, email, role';
    const values = [email, hashedPassword, role];
    const result = await pool.query(query, values);
    res.status(201).json({ user: result.rows[0] });
  } catch (error) {
    if (error.code === '23505') {
      return res.status(400).json({ message: 'Email already exists' });
    }
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ register():', error);
    res.status(500).json({ message: 'Server error', error_text: error });
  }
};
/*
// ‚úÖ –õ–æ–≥–∏–Ω
export const login = async (req, res) => {
  const { email, password: rawPassword } = req.body;
  const password = String(rawPassword || '');

  try {
    console.log('üì• –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', email, password);

    if (!email || !password) {
      return res.status(400).json({ message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const query = 'SELECT * FROM users WHERE email = $1';
    const result = await pool.query(query, [email]);

    if (result.rows.length === 0) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    const user = result.rows[0];

    // ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch) {
      console.log('‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    if (!process.env.JWT_SECRET) {
      console.error('‚ùå JWT_SECRET –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
      return res.status(500).json({ message: 'JWT secret not configured' });
    }

    const token = jwt.sign(
      { id: user.id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥');
    res.json({ token });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ login():', error);
    res.status(500).json({ message: 'Server error' });
  }
};
*/
// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
export const getProfile = async (req, res) => {
  try {
    const query = 'SELECT id, email, role, nickname FROM users WHERE id = $1';
    const result = await pool.query(query, [req.user.id]);

    if (result.rows.length === 0) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.json({ user: result.rows[0] });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getProfile():', error);
    res.status(500).json({ message: 'Server error' });
  }
};


// ‚úÖ –õ–æ–≥–∏–Ω —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
export const login = async (req, res) => {
  const { email, password: rawPassword } = req.body;
  const password = String(rawPassword || '');
  

  try {
    console.log('üì• –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { email, passwordLength: password.length });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!email || !password) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      return res.status(400).json({ 
        message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
        received: { email, hasPassword: !!password }
      });
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const query = 'SELECT * FROM users WHERE email = $1';
    const result = await pool.query(query, [email]);
    console.log('üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', result.rows.length);

    if (result.rows.length === 0) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è email:', email);
      return res.status(401).json({ 
        message: 'Invalid credentials',
        suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å'
      });
    }

    const user = result.rows[0];
    console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', { 
      id: user.id, 
      email: user.email,
      passwordHash: user.password ? '***' : 'NULL'
    });

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
    console.log('üîê –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π...');
    const isMatch = await bcrypt.compare(password, user.password);
    
    console.log("passwd: ", password);
    console.log("bdpswd: ", user.password);
    console.log('üîë –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', isMatch);

    if (!isMatch) {
      console.log('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', email);
      return res.status(401).json({ 
        message: 'Invalid credentials',
        suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è'
      });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    if (!process.env.JWT_SECRET) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: JWT_SECRET –Ω–µ –∑–∞–¥–∞–Ω');
      return res.status(500).json({ 
        message: 'Server configuration error',
        details: 'JWT secret not configured'
      });
    }

    const tokenPayload = { 
      id: user.id, 
      role: user.role,
      email: user.email
    };
    
    const token = jwt.sign(
      tokenPayload,
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      id: user.id,
      email: user.email,
      tokenExpiresIn: '1h'
    });

    res.json({ 
      token,
      user: {
        id: user.id,
        email: user.email,
        role: user.role
      }
    });
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ login():', {
      message: error.message,
      stack: error.stack,
      fullError: JSON.stringify(error, Object.getOwnPropertyNames(error))
    });
    res.status(500).json({ 
      message: 'Server error',
      error: error.message,
      code: error.code
    });
  }
};